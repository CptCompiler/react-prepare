{"version":3,"sources":["../../src/tests/ReactLifeCycle.spec.js"],"names":["global","describe","it","CompositeComponent","spyForComponentWillMount","props","spyForComponentWillUnmount","Component","propTypes","PropTypes","func","sinon","spy","t","assert","calledOnce","callCount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;cALyBA,M;IAAjBC,Q,WAAAA,Q;IAAUC,E,WAAAA,E;;;AAOlBD,SAAS,yBAAT,EAAoC,YAAM;AAAA,MAClCE,kBADkC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAOjB;AAAA,YACXC,wBADW,GACkB,KAAKC,KADvB,CACXD,wBADW;;AAEnBA;AACD;AAVqC;AAAA;AAAA,6CAYf;AAAA,YACbE,0BADa,GACkB,KAAKD,KADvB,CACbC,0BADa;;AAErBA;AACD;AAfqC;AAAA;AAAA,+BAiB7B;AACP,eAAO;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;AAnBqC;AAAA;AAAA,IACPC,gBADO;;AAClCJ,oBADkC,CAE/BK,SAF+B,GAEnB;AACjBJ,8BAA0BK,oBAAUC,IADnB;AAEjBJ,gCAA4BG,oBAAUC;AAFrB,GAFmB;;;AAsBxCR,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAME,2BAA2BO,gBAAMC,GAAN,EAAjC;AACA,QAAMN,6BAA6B,SAA7BA,0BAA6B;AAAA,aAAM,KAAK,CAAX;AAAA,KAAnC;AACA,gCACE,8BAAC,kBAAD;AACE,gCAA0BF,wBAD5B;AAEE,kCAA4BE;AAF9B,MADF;AAMAO,oBAAEC,MAAF,CACEV,yBAAyBW,UAD3B,EAEE,4CAFF;AAID,GAbD;;AAeAb,KAAG,qDAAH,EAA0D,YAAM;AAC9D,QAAME,2BAA2B,SAA3BA,wBAA2B;AAAA,aAAM,KAAK,CAAX;AAAA,KAAjC;AACA,QAAME,6BAA6BK,gBAAMC,GAAN,EAAnC;AACA,gCACE,8BAAC,kBAAD;AACE,gCAA0BR,wBAD5B;AAEE,kCAA4BE;AAF9B,MADF;AAMAO,oBAAEC,MAAF,CACER,2BAA2BU,SAA3B,KAAyC,CAD3C,EAEE,6CAFF;AAID,GAbD;AAcD,CAnDD","file":"ReactLifeCycle.spec.js","sourcesContent":["const { describe, it } = global;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { renderToString } from 'react-dom/server';\nimport sinon from 'sinon';\nimport t from 'tcomb';\n\ndescribe('React lifecycle methods', () => {\n  class CompositeComponent extends Component {\n    static propTypes = {\n      spyForComponentWillMount: PropTypes.func,\n      spyForComponentWillUnmount: PropTypes.func,\n    };\n\n    componentWillMount() {\n      const { spyForComponentWillMount } = this.props;\n      spyForComponentWillMount();\n    }\n\n    componentWillUnmount() {\n      const { spyForComponentWillUnmount } = this.props;\n      spyForComponentWillUnmount();\n    }\n\n    render() {\n      return <div>CompositeComponent</div>;\n    }\n  }\n\n  it('renderToString calls #componentWillMount()', () => {\n    const spyForComponentWillMount = sinon.spy();\n    const spyForComponentWillUnmount = () => void 0;\n    renderToString(\n      <CompositeComponent\n        spyForComponentWillMount={spyForComponentWillMount}\n        spyForComponentWillUnmount={spyForComponentWillUnmount}\n      />,\n    );\n    t.assert(\n      spyForComponentWillMount.calledOnce,\n      '#componentWillMount() has been called once',\n    );\n  });\n\n  it(\"renderToString doesn't call #componentWillUnmount()\", () => {\n    const spyForComponentWillMount = () => void 0;\n    const spyForComponentWillUnmount = sinon.spy();\n    renderToString(\n      <CompositeComponent\n        spyForComponentWillMount={spyForComponentWillMount}\n        spyForComponentWillUnmount={spyForComponentWillUnmount}\n      />,\n    );\n    t.assert(\n      spyForComponentWillUnmount.callCount === 0,\n      '#componentWillUnmount() has not been called',\n    );\n  });\n});\n"]}