{"version":3,"sources":["../../src/tests/isThenable.spec.js"],"names":["global","describe","it","t","assert","resolve","nonThenable","thenable","then"],"mappings":";;;;;;AACA;;;;AAEA;;;;;;cAHyBA,M;IAAjBC,Q,WAAAA,Q;IAAUC,E,WAAAA,E;;;AAKlBD,SAAS,eAAT,EAA0B,YAAM;AAC9BC,KAAG,yCAAH,EAA8C,YAAM;AAClDC,oBAAEC,MAAF,CAAS,0BAAW,kBAAQC,OAAR,EAAX,CAAT;AACD,GAFD;;AAIAH,KAAG,iCAAH,EAAsC,YAAM;AAC1CC,oBAAEC,MAAF,CAAS,CAAC,0BAAW,IAAX,CAAV;AACD,GAFD;;AAIAF,KAAG,mCAAH,EAAwC,YAAM;AAC5CC,oBAAEC,MAAF,CAAS,CAAC,0BAAW,KAAK,CAAhB,CAAV;AACD,GAFD;;AAIAF,KAAG,qCAAH,EAA0C,YAAM;AAC9C,aAASI,WAAT,GAAuB,CAAE;AACzBH,oBAAEC,MAAF,CAAS,CAAC,0BAAWE,WAAX,CAAV;AACD,GAHD;;AAKAJ,KAAG,kCAAH,EAAuC,YAAM;AAC3CC,oBAAEC,MAAF,CAAS,CAAC,0BAAW,YAAM,CAAE,CAAnB,CAAV;AACD,GAFD;;AAIAF,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAMK,WAAW;AACfC,YAAM;AAAA,eAAM,kBAAQH,OAAR,EAAN;AAAA;AADS,KAAjB;AAGAF,oBAAEC,MAAF,CAAS,0BAAWG,QAAX,CAAT;AACD,GALD;AAMD,CA5BD","file":"isThenable.spec.js","sourcesContent":["const { describe, it } = global;\nimport t from 'tcomb';\n\nimport isThenable from '../utils/isThenable';\n\ndescribe('isThenable(p)', () => {\n  it('recognizes a native Promise as thenable', () => {\n    t.assert(isThenable(Promise.resolve()));\n  });\n\n  it('recognizes null as non-thenable', () => {\n    t.assert(!isThenable(null));\n  });\n\n  it('recognizes void 0 as non-thenable', () => {\n    t.assert(!isThenable(void 0));\n  });\n\n  it('recognizes function as non-thenable', () => {\n    function nonThenable() {}\n    t.assert(!isThenable(nonThenable));\n  });\n\n  it('recognizes arrow as non-thenable', () => {\n    t.assert(!isThenable(() => {}));\n  });\n\n  it('recognizes custom thenable as thenable', () => {\n    const thenable = {\n      then: () => Promise.resolve(),\n    };\n    t.assert(isThenable(thenable));\n  });\n});\n"]}