{"version":3,"sources":["../../src/tests/dispatched.spec.js"],"names":["global","describe","it","HTTP_STATUS_OK_BOUNDS","min","max","echoServer","use","echo","next","response","body","request","path","echoHttpServer","listen","baseUrlObj","protocol","hostname","port","address","FETCH_STARTED","FETCH_FAILED","FETCH_SUCCEEDED","rootReducer","state","type","payload","into","status","statusCode","err","value","store","thunkMiddleware","fetchInto","pathname","dispatch","href","url","format","res","text","OriginalEchoAlpha","alpha","propTypes","PropTypes","object","ConnectedEchoAlpha","EchoAlpha","OriginalEchoBeta","beta","ConnectedEchoBeta","EchoBeta","App","app","html","t","assert","close"],"mappings":"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","file":"dispatched.spec.js","sourcesContent":["const { describe, it } = global;\nimport url from 'url';\nimport t from 'tcomb';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { createStore, applyMiddleware } from 'redux';\nimport { connect, Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport koa from 'koa';\nimport fetch from 'node-fetch';\n\nimport dispatched from '../dispatched';\nimport prepare from '../prepare';\n\nconst HTTP_STATUS_OK_BOUNDS = {\n  min: 200,\n  max: 300,\n};\n\ndescribe('dispatched', () => {\n  it('Real-world-like example using redux, koa, et. al', async () => {\n    // Create a fake echo server that replies with the pathname, preceded by 'echo '.\n    const echoServer = koa().use(function* echo(next) {\n      this.response.body = `echo ${this.request.path}`;\n      yield next;\n    });\n    const echoHttpServer = echoServer.listen();\n    try {\n      const baseUrlObj = {\n        protocol: 'http:',\n        hostname: 'localhost',\n        port: echoHttpServer.address().port,\n      };\n\n      // Action type constants, also used to expres fetch status\n      const FETCH_STARTED = 'FETCH_STARTED';\n      const FETCH_FAILED = 'FETCH_FAILED';\n      const FETCH_SUCCEEDED = 'FETCH_SUCCEEDED';\n\n      const rootReducer = (state = {}, { type, ...payload }) => {\n        if (type === FETCH_STARTED) {\n          const { into } = payload;\n          return Object.assign({}, state, {\n            [into]: {\n              status: FETCH_STARTED,\n            },\n          });\n        }\n        if (type === FETCH_FAILED) {\n          const { into, statusCode, err } = payload;\n          return Object.assign({}, state, {\n            [into]: {\n              status: FETCH_FAILED,\n              statusCode,\n              err,\n            },\n          });\n        }\n        if (type === FETCH_SUCCEEDED) {\n          const { into, value } = payload;\n          return Object.assign({}, state, {\n            [into]: {\n              status: FETCH_SUCCEEDED,\n              value,\n            },\n          });\n        }\n        return state;\n      };\n\n      // redux store used by the app\n      const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n      // async action creator\n      const fetchInto = (pathname, into) => async dispatch => {\n        dispatch({\n          type: FETCH_STARTED,\n          into,\n        });\n        const href = url.format(Object.assign({}, baseUrlObj, { pathname }));\n        try {\n          const res = await fetch(href);\n          if (\n            res.status < HTTP_STATUS_OK_BOUNDS.min ||\n            res.status >= HTTP_STATUS_OK_BOUNDS.max\n          ) {\n            dispatch({\n              type: FETCH_FAILED,\n              into,\n              statusCode: res.status,\n              err: await res.text(),\n            });\n            return;\n          }\n          dispatch({\n            type: FETCH_SUCCEEDED,\n            into,\n            value: await res.text(),\n          });\n          return;\n        } catch (err) {\n          dispatch({\n            type: FETCH_FAILED,\n            into,\n            statusCode: null,\n            err,\n          });\n        }\n      };\n\n      const OriginalEchoAlpha = ({ alpha }) => {\n        if (typeof alpha !== 'object') {\n          return <div>???</div>;\n        }\n        const { status, err, value } = alpha;\n        if (status === FETCH_STARTED) {\n          return <div>...</div>;\n        }\n        if (status === FETCH_FAILED) {\n          return <div>Error fetching beta (Reason: {err})</div>;\n        }\n        return <div>{value}</div>;\n      };\n      OriginalEchoAlpha.propTypes = {\n        alpha: PropTypes.object,\n      };\n\n      const ConnectedEchoAlpha = connect(({ alpha }) => ({ alpha }))(\n        OriginalEchoAlpha,\n      );\n\n      const EchoAlpha = dispatched(({ value }, dispatch) =>\n        dispatch(fetchInto(value, 'alpha')),\n      )(ConnectedEchoAlpha);\n\n      const OriginalEchoBeta = ({ beta }) => {\n        if (typeof beta !== 'object') {\n          return <div>???</div>;\n        }\n        const { status, err, value } = beta;\n        if (status === FETCH_STARTED) {\n          return <div>...</div>;\n        }\n        if (status === FETCH_FAILED) {\n          return <div>Error fetching beta (Reason: {err})</div>;\n        }\n        return <div>{value}</div>;\n      };\n      OriginalEchoBeta.propTypes = {\n        beta: PropTypes.object,\n      };\n\n      const ConnectedEchoBeta = connect(({ beta }) => ({ beta }))(\n        OriginalEchoBeta,\n      );\n\n      const EchoBeta = dispatched(({ value }, dispatch) =>\n        dispatch(fetchInto(value, 'beta')),\n      )(ConnectedEchoBeta);\n\n      const App = () => (\n        <ul>\n          <li key=\"alpha\"><EchoAlpha value=\"foo\" /></li>\n          <li key=\"beta\"><EchoBeta value=\"bar\" /></li>\n        </ul>\n      );\n\n      const app = <Provider store={store}><App /></Provider>;\n\n      await prepare(app);\n      const html = renderToStaticMarkup(app);\n      t.assert(\n        html ===\n          '<ul><li><div>echo /foo</div></li><li><div>echo /bar</div></li></ul>',\n        'renders correct html',\n      );\n    } finally {\n      echoHttpServer.close();\n    }\n  });\n});\n"]}